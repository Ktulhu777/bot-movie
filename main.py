# Python API
import asyncio
import logging
import sys

# Third party modules
from aiogram import Dispatcher, Bot, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.methods import DeleteWebhook

# Our modules
from config.config import TOKEN, PASSWORD_ADMIN
from service_database.service import add_user_in_db, add_movie_in_db, movie_exists, add_super_user, exists_super_user
from middlewares.session_db import DataBaseSession
from database_engine import async_session_maker
from utils.utils import on_startup, on_shotdown, markup_subscription, cancel_button
from states.default_states import MovieState, AdminState
from models.models import Movie

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

dp = Dispatcher()

groups = ['@movie99F']


async def exampl_subscription(user_id) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–æ True"""
    result = [await bot.get_chat_member(chat_id=i, user_id=user_id) for i in groups]
    if all(map(lambda x: x.status != 'left', result)):
        return True
    return False


@dp.message(CommandStart())
async def start_bot(message: types.Message, session: AsyncSession):
    await add_user_in_db(pk_user=message.from_user.id, session=session)
    if not await exampl_subscription(user_id=message.from_user.id):
        await message.answer(
            f"""üôãüèª‚Äç‚ôÇÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <i>{message.from_user.username}</i>, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.""",
            reply_markup=markup_subscription)
    else:
        await message.answer("üÜî –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ —Å –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–æ.")


@dp.callback_query(F.data == 'subscription')
async def subscription_verification(callback: types.CallbackQuery):
    if await exampl_subscription(user_id=callback.from_user.id):
        await callback.message.edit_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ üéâ",
                                         show_alert=True)
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.",
                                      show_alert=True,
                                      reply_markup=markup_subscription)


@dp.callback_query(F.data == 'cancel')
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ FSM"""
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await callback.message.edit_text("‚ùå –í—ã —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–º–µ–Ω—É ‚ùå")


@dp.message(Command('appoint_an_administrator'))
async def appoint_an_administrator(message: types.Message, state: FSMContext):
    await state.set_state(AdminState.password)
    await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=cancel_button)


@dp.message(AdminState.password)
async def appoint_an_administrator_process(message: types.Message, state: FSMContext, session: AsyncSession):
    if PASSWORD_ADMIN == message.text:
        await state.update_data(password=message.text)
        await add_super_user(id_super_user=message.from_user.id, session=session)
        await state.clear()
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.")
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å",  reply_markup=cancel_button)


@dp.message(Command('add_movie'))
async def start_add_movie_process(message: types.Message, state: FSMContext, session: AsyncSession):
    if await exists_super_user(id_super_user=int(message.from_user.id),
                               session=session):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.", reply_markup=cancel_button)
        await state.set_state(MovieState.title)
    else:
        await message.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")


@dp.message(MovieState.title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üÜî –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.", reply_markup=cancel_button)
    await state.set_state(MovieState.code_movie)


@dp.message(MovieState.code_movie)
async def process_code_movie(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text.isdigit():
        if await movie_exists(movie_code=int(message.text), session=session):
            await state.update_data(code_movie=message.text)
            await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            data = await state.get_data()  # dict
            await state.clear()
            await add_movie_in_db(movie_code=int(data['code_movie']), title=data['title'], session=session)
        else:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–π –∫–æ–¥ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º —Ñ–∏–ª—å–º–æ–º.", reply_markup=cancel_button)
    else:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=cancel_button)


@dp.message()
async def get_title_movie(message: types.Message, session: AsyncSession):
    if message.text.isdigit():
        if not await exampl_subscription(user_id=message.from_user.id):
            await message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.",
                                 reply_markup=markup_subscription)
        else:
            result: Movie = await movie_exists(movie_code=int(message.text), session=session, get_movie=True)
            if result is None:
                await message.answer(f"‚ùå –ü–æ –¥–∞–Ω–Ω–æ–º—É –∫–æ–¥—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {result.title}.")
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")


async def main() -> None:
    await bot(DeleteWebhook(drop_pending_updates=True))
    dp.message.register(bot)
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shotdown)
    dp.update.middleware(DataBaseSession(session_pool=async_session_maker))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
